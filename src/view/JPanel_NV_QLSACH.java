/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.QLTV.utils.MsgBox;
import dao.KhoSachDAO;
import dao.LoaiSachDAO;
import entities.KhoSach;
import entities.LoaiSach;
import java.awt.Color;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.sql.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.Cache_NV;
import model.Convert;
import model.ImgTSX;
import model.Util;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public final class JPanel_NV_QLSACH extends javax.swing.JFrame
        implements InterfaceForm<KhoSach> {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form JPanel_SACH
     */
    public JPanel_NV_QLSACH() {
        initComponents();
        this.loadData();
        setSize(1050, 516);
        setLocation(320, 200);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tbdpane = new javax.swing.JTabbedPane();
        pnlTable = new javax.swing.JPanel();
        pnlTTSach = new javax.swing.JPanel();
        lblAnh = new javax.swing.JLabel();
        spr1 = new javax.swing.JSeparator();
        lblTenSach = new javax.swing.JLabel();
        lblTacGia = new javax.swing.JLabel();
        txtTSach = new javax.swing.JTextField();
        txtTGia = new javax.swing.JTextField();
        spr2 = new javax.swing.JSeparator();
        spnLoai = new javax.swing.JScrollPane();
        tblLoaiSach = new javax.swing.JTable();
        spnKho = new javax.swing.JScrollPane();
        tblKhoSach = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        txtColsSelected = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        pnlQL = new javax.swing.JPanel();
        lblImgSach = new javax.swing.JLabel();
        pnlInformation = new javax.swing.JPanel();
        lblSachID = new javax.swing.JLabel();
        lblTSach = new javax.swing.JLabel();
        lblNhaxb = new javax.swing.JLabel();
        lblTGia = new javax.swing.JLabel();
        lblSoLuong = new javax.swing.JLabel();
        lblDonGia = new javax.swing.JLabel();
        lblNgayNhap = new javax.swing.JLabel();
        lblLoai = new javax.swing.JLabel();
        lblTuSo = new javax.swing.JLabel();
        lblKeSo = new javax.swing.JLabel();
        txtSachID = new javax.swing.JTextField();
        txtTenSach = new javax.swing.JTextField();
        txtNhaXb = new javax.swing.JTextField();
        txtTacGia = new javax.swing.JTextField();
        spfSoLuong = new com.toedter.components.JSpinField();
        txtDonGia = new javax.swing.JTextField();
        cldNgayNhap = new com.toedter.calendar.JDateChooser();
        cboLoaiSach = new javax.swing.JComboBox<>();
        spfTuSo = new com.toedter.components.JSpinField();
        spfKeSo = new com.toedter.components.JSpinField();
        pnlThaoTac = new javax.swing.JPanel();
        bntAdd = new javax.swing.JButton();
        bntUppdate = new javax.swing.JButton();
        bntDelete = new javax.swing.JButton();
        bntNew = new javax.swing.JButton();
        bntExit = new javax.swing.JButton();
        bntExport = new javax.swing.JButton();
        pnlDieuHuong = new javax.swing.JPanel();
        bntFirst = new javax.swing.JButton();
        bntPrev = new javax.swing.JButton();
        bntNext = new javax.swing.JButton();
        bntEnd = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        pnlTTSach.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblAnh.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N
        lblAnh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAnh.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblAnh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblAnh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        spr1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lblTenSach.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblTenSach.setText("Tên sách:");

        lblTacGia.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblTacGia.setText("Tác giả:");

        javax.swing.GroupLayout pnlTTSachLayout = new javax.swing.GroupLayout(pnlTTSach);
        pnlTTSach.setLayout(pnlTTSachLayout);
        pnlTTSachLayout.setHorizontalGroup(
            pnlTTSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTTSachLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTTSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTGia, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(lblTenSach)
                    .addComponent(lblTacGia)
                    .addComponent(txtTSach, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(spr2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTTSachLayout.setVerticalGroup(
            pnlTTSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spr1)
            .addGroup(pnlTTSachLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTTSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAnh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlTTSachLayout.createSequentialGroup()
                        .addComponent(lblTenSach)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTSach, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTacGia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTGia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spr2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 57, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tblLoaiSach.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblLoaiSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "LoaiID", "Tên loại sách", "Tủ số"
            }
        ));
        tblLoaiSach.setToolTipText("Loại sách");
        tblLoaiSach.setName("LoaiSach"); // NOI18N
        tblLoaiSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLoaiSachMouseClicked(evt);
            }
        });
        tblLoaiSach.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblLoaiSachKeyReleased(evt);
            }
        });
        spnLoai.setViewportView(tblLoaiSach);
        if (tblLoaiSach.getColumnModel().getColumnCount() > 0) {
            tblLoaiSach.getColumnModel().getColumn(0).setMaxWidth(80);
            tblLoaiSach.getColumnModel().getColumn(2).setMaxWidth(50);
        }

        tblKhoSach.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblKhoSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "SachID", "TÊN SÁCH", "NHÀ XUẤT BẢN", "TÁC GIẢ", "SỐ LƯỢNG", "ĐƠN GIÁ", "KỆ SỐ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblKhoSach.setToolTipText("Thông tin sách");
        tblKhoSach.setName("KhoSach"); // NOI18N
        tblKhoSach.setRowHeight(20);
        tblKhoSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKhoSachMouseClicked(evt);
            }
        });
        tblKhoSach.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblKhoSachKeyReleased(evt);
            }
        });
        spnKho.setViewportView(tblKhoSach);
        if (tblKhoSach.getColumnModel().getColumnCount() > 0) {
            tblKhoSach.getColumnModel().getColumn(0).setMaxWidth(50);
            tblKhoSach.getColumnModel().getColumn(1).setMaxWidth(100);
            tblKhoSach.getColumnModel().getColumn(2).setMinWidth(250);
            tblKhoSach.getColumnModel().getColumn(5).setMaxWidth(80);
            tblKhoSach.getColumnModel().getColumn(6).setMaxWidth(80);
            tblKhoSach.getColumnModel().getColumn(7).setMaxWidth(80);
        }

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        txtColsSelected.setText("Selected: ALL");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/QLTV/icon/Excel.png"))); // NOI18N
        jButton1.setText("Xuất File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTableLayout = new javax.swing.GroupLayout(pnlTable);
        pnlTable.setLayout(pnlTableLayout);
        pnlTableLayout.setHorizontalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTableLayout.createSequentialGroup()
                .addGroup(pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTableLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spnLoai, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(pnlTTSach, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlTableLayout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnKho, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                    .addGroup(pnlTableLayout.createSequentialGroup()
                        .addComponent(txtColsSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearch)))
                .addContainerGap())
        );
        pnlTableLayout.setVerticalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTableLayout.createSequentialGroup()
                        .addGroup(pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtColsSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnKho, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE))
                    .addGroup(pnlTableLayout.createSequentialGroup()
                        .addComponent(pnlTTSach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnLoai, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pnlTableLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtColsSelected, txtSearch});

        tbdpane.addTab("XEM THÔNG TIN", pnlTable);

        lblImgSach.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblImgSach.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImgSach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/book.png"))); // NOI18N
        lblImgSach.setText("none.png");
        lblImgSach.setToolTipText("");
        lblImgSach.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblImgSach.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblImgSach.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lblImgSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImgSachMouseClicked(evt);
            }
        });

        pnlInformation.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        java.awt.GridBagLayout pnlInformationLayout = new java.awt.GridBagLayout();
        pnlInformationLayout.columnWidths = new int[] {0, 5, 0, 5, 0};
        pnlInformationLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        pnlInformation.setLayout(pnlInformationLayout);

        lblSachID.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblSachID.setText("Mã sách");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(lblSachID, gridBagConstraints);

        lblTSach.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblTSach.setText("Tên Sách");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(lblTSach, gridBagConstraints);

        lblNhaxb.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblNhaxb.setText("Nhà xuất bản");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(lblNhaxb, gridBagConstraints);

        lblTGia.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblTGia.setText("Tác giả");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(lblTGia, gridBagConstraints);

        lblSoLuong.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblSoLuong.setText("Số lượng");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(lblSoLuong, gridBagConstraints);

        lblDonGia.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblDonGia.setText("Đơn giá");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(lblDonGia, gridBagConstraints);

        lblNgayNhap.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblNgayNhap.setText("Ngày nhập");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(lblNgayNhap, gridBagConstraints);

        lblLoai.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblLoai.setText("Loại sách");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(lblLoai, gridBagConstraints);

        lblTuSo.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblTuSo.setText("Vị trí tủ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(lblTuSo, gridBagConstraints);

        lblKeSo.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblKeSo.setText("Vị trí kệ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(lblKeSo, gridBagConstraints);

        txtSachID.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(txtSachID, gridBagConstraints);

        txtTenSach.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(txtTenSach, gridBagConstraints);

        txtNhaXb.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(txtNhaXb, gridBagConstraints);

        txtTacGia.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(txtTacGia, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(spfSoLuong, gridBagConstraints);

        txtDonGia.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(txtDonGia, gridBagConstraints);

        cldNgayNhap.setDateFormatString("yyyy-MM-dd");
        cldNgayNhap.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(cldNgayNhap, gridBagConstraints);

        cboLoaiSach.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cboLoaiSach.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Khác" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        pnlInformation.add(cboLoaiSach, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlInformation.add(spfTuSo, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlInformation.add(spfKeSo, gridBagConstraints);

        pnlThaoTac.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlThaoTac.setLayout(new java.awt.GridBagLayout());

        bntAdd.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/insert.png"))); // NOI18N
        bntAdd.setText("Thêm");
        bntAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 20;
        pnlThaoTac.add(bntAdd, gridBagConstraints);

        bntUppdate.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntUppdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/update.png"))); // NOI18N
        bntUppdate.setText("Sửa");
        bntUppdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntUppdateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 20;
        pnlThaoTac.add(bntUppdate, gridBagConstraints);

        bntDelete.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        bntDelete.setText("Xóa");
        bntDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 20;
        pnlThaoTac.add(bntDelete, gridBagConstraints);

        bntNew.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/new.png"))); // NOI18N
        bntNew.setText("Mới");
        bntNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 20;
        pnlThaoTac.add(bntNew, gridBagConstraints);

        bntExit.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/home.png"))); // NOI18N
        bntExit.setText("Đóng");
        bntExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 20;
        pnlThaoTac.add(bntExit, gridBagConstraints);

        bntExport.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/export.png"))); // NOI18N
        bntExport.setText("Xuất file");
        bntExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntExportActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 20;
        pnlThaoTac.add(bntExport, gridBagConstraints);

        pnlDieuHuong.setLayout(new java.awt.GridLayout(1, 0));

        bntFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/First.png"))); // NOI18N
        bntFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntFirstActionPerformed(evt);
            }
        });
        pnlDieuHuong.add(bntFirst);

        bntPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Prev.png"))); // NOI18N
        bntPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPrevActionPerformed(evt);
            }
        });
        pnlDieuHuong.add(bntPrev);

        bntNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Next.png"))); // NOI18N
        bntNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntNextActionPerformed(evt);
            }
        });
        pnlDieuHuong.add(bntNext);

        bntEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/End.png"))); // NOI18N
        bntEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEndActionPerformed(evt);
            }
        });
        pnlDieuHuong.add(bntEnd);

        javax.swing.GroupLayout pnlQLLayout = new javax.swing.GroupLayout(pnlQL);
        pnlQL.setLayout(pnlQLLayout);
        pnlQLLayout.setHorizontalGroup(
            pnlQLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlQLLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImgSach, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlQLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlInformation, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                    .addComponent(pnlDieuHuong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlThaoTac, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlQLLayout.setVerticalGroup(
            pnlQLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlQLLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlQLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlThaoTac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblImgSach, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlQLLayout.createSequentialGroup()
                        .addComponent(pnlInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlDieuHuong, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tbdpane.addTab("QUẢN LÝ SÁCH", pnlQL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tbdpane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbdpane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblLoaiSachKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblLoaiSachKeyReleased
        int k = evt.getKeyCode();
        if (k == 33 || k == 34 || k == 38 || k == 40) {
            this.setKhoLoaiSach();
        }
    }//GEN-LAST:event_tblLoaiSachKeyReleased

    private void tblLoaiSachMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLoaiSachMouseClicked
        this.setKhoLoaiSach();
    }//GEN-LAST:event_tblLoaiSachMouseClicked

    private void tblKhoSachMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKhoSachMouseClicked
        if (evt.getClickCount() > 1) {
            this.tbdpane.setSelectedIndex(1);
        } else {
            this.colSelected(tblKhoSach, txtColsSelected);
            this.tblKSachClick();
            this.UpdateStatus();
        }
    }//GEN-LAST:event_tblKhoSachMouseClicked

    private void tblKhoSachKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblKhoSachKeyReleased
        if (!list.isEmpty()) {
            this.colSelected(tblKhoSach, txtColsSelected);
            int k = evt.getKeyCode();
            if (k == 33 || k == 34 || k == 38 || k == 40) {
                this.tblKSachClick();
            }
            this.UpdateStatus();
        }
    }//GEN-LAST:event_tblKhoSachKeyReleased

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (evt.getKeyCode() == 10) {
            this.setKhoLoaiSach();
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void lblImgSachMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImgSachMouseClicked
        img.setFile(Util.Image.ChooserFile(this), lblAnh);
    }//GEN-LAST:event_lblImgSachMouseClicked

    private void bntAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntAddActionPerformed
        this.Insert();
        this.UpdateStatus();
    }//GEN-LAST:event_bntAddActionPerformed

    private void bntUppdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntUppdateActionPerformed
        this.update();
        this.UpdateStatus();
    }//GEN-LAST:event_bntUppdateActionPerformed

    private void bntDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntDeleteActionPerformed
        this.delete();
        this.UpdateStatus();
    }//GEN-LAST:event_bntDeleteActionPerformed

    private void bntNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntNewActionPerformed
        this.clearForm();
        row = -1;
        this.UpdateStatus();
    }//GEN-LAST:event_bntNewActionPerformed

    private void bntExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntExportActionPerformed
        new ShowSelectionExport(this, true, tblKhoSach).setVisible(true);
    }//GEN-LAST:event_bntExportActionPerformed

    private void bntExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntExitActionPerformed
        JLabel lbl = JFrame_TrangNV.lblTrangThai;
        this.removeAll();
        this.repaint();
        this.validate();
        this.setVisible(false);

        lbl.setText("Trang chủ");
        lbl.setIcon(Util.Image.getIcon("src/icons/home.gif"));
    }//GEN-LAST:event_bntExitActionPerformed

    private void bntFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntFirstActionPerformed
        this.Directional(row = 0);
    }//GEN-LAST:event_bntFirstActionPerformed

    private void bntPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPrevActionPerformed
        this.Directional(row > 0 ? --row : 0);
    }//GEN-LAST:event_bntPrevActionPerformed

    private void bntNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntNextActionPerformed
        row = list.isEmpty() ? -1 : ++row;
        this.Directional(row);
    }//GEN-LAST:event_bntNextActionPerformed

    private void bntEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEndActionPerformed
        row = list.isEmpty() ? -1 : list.size() - 1;
        this.Directional(row);
    }//GEN-LAST:event_bntEndActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.xuatFile();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JPanel_NV_QLSACH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new JPanel_NV_QLSACH().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntAdd;
    private javax.swing.JButton bntDelete;
    private javax.swing.JButton bntEnd;
    private javax.swing.JButton bntExit;
    private javax.swing.JButton bntExport;
    private javax.swing.JButton bntFirst;
    private javax.swing.JButton bntNew;
    private javax.swing.JButton bntNext;
    private javax.swing.JButton bntPrev;
    private javax.swing.JButton bntUppdate;
    private javax.swing.JComboBox<String> cboLoaiSach;
    private com.toedter.calendar.JDateChooser cldNgayNhap;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lblAnh;
    private javax.swing.JLabel lblDonGia;
    private javax.swing.JLabel lblImgSach;
    private javax.swing.JLabel lblKeSo;
    private javax.swing.JLabel lblLoai;
    private javax.swing.JLabel lblNgayNhap;
    private javax.swing.JLabel lblNhaxb;
    private javax.swing.JLabel lblSachID;
    private javax.swing.JLabel lblSoLuong;
    private javax.swing.JLabel lblTGia;
    private javax.swing.JLabel lblTSach;
    private javax.swing.JLabel lblTacGia;
    private javax.swing.JLabel lblTenSach;
    private javax.swing.JLabel lblTuSo;
    private javax.swing.JPanel pnlDieuHuong;
    private javax.swing.JPanel pnlInformation;
    private javax.swing.JPanel pnlQL;
    private javax.swing.JPanel pnlTTSach;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JPanel pnlThaoTac;
    private com.toedter.components.JSpinField spfKeSo;
    private com.toedter.components.JSpinField spfSoLuong;
    private com.toedter.components.JSpinField spfTuSo;
    private javax.swing.JScrollPane spnKho;
    private javax.swing.JScrollPane spnLoai;
    private javax.swing.JSeparator spr1;
    private javax.swing.JSeparator spr2;
    private javax.swing.JTabbedPane tbdpane;
    private javax.swing.JTable tblKhoSach;
    private javax.swing.JTable tblLoaiSach;
    private javax.swing.JTextField txtColsSelected;
    private javax.swing.JTextField txtDonGia;
    private javax.swing.JTextField txtNhaXb;
    private javax.swing.JTextField txtSachID;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTGia;
    private javax.swing.JTextField txtTSach;
    private javax.swing.JTextField txtTacGia;
    private javax.swing.JTextField txtTenSach;
    // End of variables declaration//GEN-END:variables

    // __________________________________________________________________DATA
    private final ImgTSX img = new ImgTSX(lblAnh,
            "src/icons/book.png", "images/Sach/");
    private DefaultTableModel model = null;
    private List<LoaiSach> listLSach = null;
    private List<KhoSach> list = null;
    private KhoSachDAO dao = null;
    private boolean status = false;
    private int row = -1;

    // __________________________________________________________________PANE_1
    @SuppressWarnings("unchecked")
    private void loadData() {
        //Thay đổi thông tin form
        this.tblKhoSach.setColumnSelectionAllowed(true);
        this.tblKhoSach.setAutoCreateRowSorter(true);
        this.setLocationRelativeTo(null);

        //Đổ dữ liệu combobox (loại sách bên chỉnh sửa)
        DefaultComboBoxModel<String> cboModel;
        cboModel = (DefaultComboBoxModel) this.cboLoaiSach.getModel();
        cboModel.removeAllElements();

        // Dữ liệu bảng loại sách
        this.model = (DefaultTableModel) this.tblLoaiSach.getModel();
        listLSach = new LoaiSachDAO().SelectAllElement();
        String[] first = {"ALL", "Chọn tất cả loại sách", "all"};

        // đổ thông tin bảng loại sách
        model.addRow(first);
        listLSach.forEach((x) -> {
            cboModel.addElement(x.toString());
            Object[] rowData = {x.getLoaiID(), x.getTenLoai(), x.getTuSo()};
            model.addRow(rowData);
        });
        // _______________________________________ TẢI DỮ LIỆU PANE

        // dữ liệu bảng sách
        dao = new KhoSachDAO();
        this.list = dao.SelectAllElement();
        // đổ thông tin bảng sách
        this.tblLoaiSach.setRowSelectionInterval(0, 0);
        this.fillTable();
    }

    @Override
    public void Insert() {
        int i = this.findList(this.txtSachID.getText());
        if (i < 0) {
            KhoSach data = this.getForm();
            if (validateData(data)) {
                ImgTSX.width = 150;
                ImgTSX.height = 150;
                data.setHinh(img.checkFile() ? (data.getSachID() + ".png") : null);
                if (dao.insert(data)) {
                    list.add(data);
                    this.img.saveUpIcon(data.getHinh());
                    this.fillTable();
                    this.alertGroup(this.getName(), alertType.insert1);
                    this.clearForm();
                } else {
                    this.alertGroup(this.getName(), alertType.insert3);
                }
            }
        } else {
            this.txtSachID.setBackground(Color.red);
            this.alertGroup(this.getName(), alertType.insert2);
        }
    }

    @Override
    public void update() {
        int i = this.findList(this.txtSachID.getText());
        if (i > -1) {
            KhoSach data = this.getForm();
            if (validateData(data)) {
                ImgTSX.width = 150;
                ImgTSX.height = 150;
                data.setHinh(img.checkFile() ? (data.getSachID() + ".png") : null);
                if (dao.update(data)) {
                    list.set(i, data);
                    this.img.saveUpIcon(data.getSachID());
                    this.fillTable();
                    this.alertGroup(this.getName(), alertType.update1);
                    this.clearForm();
                } else {
                    this.alertGroup(this.getName(), alertType.update3);
                }
            }
        } else {
            this.txtSachID.setBackground(Color.red);
            this.alertGroup(this.getName(), alertType.update2);
        }
    }

    @Override
    public void delete() {
        int i = this.findList(this.txtSachID.getText());
        if (i > -1) {
            if (dao.delete(this.txtSachID.getText())) {
                list.remove(i);
                this.img.deleteIcon();
                this.fillTable();
                this.alertGroup(this.getName(), alertType.delete1);
                this.clearForm();
            } else {
                this.alertGroup(this.getName(), alertType.delete3);
            }
        } else {
            this.txtSachID.setBackground(Color.red);
            this.alertGroup(this.getName(), alertType.delete2);
        }
        this.clearForm();
    }

    @Override
    public int findList(Object key) {
        String findBy = (String) key;
        for (int i = 0; i < list.size(); i++) {
            if (findBy.equalsIgnoreCase(list.get(i).getSachID())) {
                return i;
            }
        }
        return -1;
    }

    public LoaiSach findListIndexOfLoai(String key) {
        int index = findListLoai(key);
        if (index == -1) {
            return null;
        } else {
            return listLSach.get(index);
        }
    }

    public int findListLoai(String key) {
        for (int i = 0; i < listLSach.size(); i++) {
            if (key.equalsIgnoreCase(listLSach.get(i).getLoaiID())) {
                return i;
            }
        }
        return -1;
    }

    @Override
    @SuppressWarnings("deprecation")
    public KhoSach getForm() {
        String F_ID = listLSach.get(cboLoaiSach.getSelectedIndex()).getLoaiID();
        KhoSach khoSach = new KhoSach();

        khoSach.setSachID(Util.ramdomCode(this.txtSachID.getText(), 7));
        khoSach.setTenSach(this.txtTenSach.getText());
        khoSach.setNhaxb(this.txtNhaXb.getText());
        khoSach.setTacGia(this.txtTacGia.getText());
        khoSach.setHinh(img.getFile().getName());
        khoSach.setSoLuong(this.spfTuSo.getValue());
        khoSach.setDonGia(Double.parseDouble(this.txtDonGia.getText()));
        khoSach.setNgayNhap(new Date(this.cldNgayNhap.getDate().getTime()));
        khoSach.setKeSo(this.spfKeSo.getValue());
        khoSach.setLoaiID(F_ID);

        return khoSach;

    }

    @Override
    public void setForm(KhoSach data) {
        ImgTSX.width = 150;
        ImgTSX.height = 150;
        img.setFile(data.getHinh(), lblAnh);
        this.txtTSach.setText(data.getTenSach());
        this.txtTGia.setText(data.getTacGia());
    }

    private void setForm2(KhoSach data) {
        this.txtSachID.setText(data.getSachID());
        this.txtTenSach.setText(data.getTenSach());
        this.txtNhaXb.setText(data.getNhaxb());
        this.txtTacGia.setText(data.getTacGia());
        this.spfTuSo.setValue(data.getSoLuong());
        this.txtDonGia.setText(String.valueOf(data.getDonGia()));
        this.cldNgayNhap.setDate(data.getNgayNhap());
        this.spfSoLuong.setValue(data.getSoLuong());
        if (data.getLoaiID() != null) {
            int index = findListLoai(data.getLoaiID());
            this.spfTuSo.setValue(listLSach.get(index).getTuSo());
            this.cboLoaiSach.setSelectedIndex(index);
        }
        this.spfKeSo.setValue(data.getKeSo());
        // Hình ảnh table
        this.lblImgSach.setText(this.lblAnh.getText());
        this.lblImgSach.setIcon(Convert.Image(
                ((ImageIcon) this.lblAnh.getIcon()), 200, 200)
        );

    }

    @Override
    public void clearForm() {
        // Phương thức mặc định của interface
        this.clearForm(pnlInformation);
        // Xóa thông tin form
        this.lblAnh.setText("150 x 150");
        this.lblAnh.setIcon(null);
        // Cập nhật trạng thái
        this.status = true;
        this.clearBgr();
        this.setStatus();
    }

    // Trạng thái các fields nhập liệu và nút tương tác
    private void setStatus() {
        txtSachID.setBackground(status ? Color.WHITE : Color.GRAY);
        bntUppdate.setEnabled(!status);
        bntDelete.setEnabled(!status);
        txtSachID.setEditable(status);
        bntAdd.setEnabled(status);
    }

    // Xóa màu nền các fields
    private void clearBgr() {
        txtSachID.setBackground(null);
        txtTenSach.setBackground(null);
        txtNhaXb.setBackground(null);
        txtTGia.setBackground(null);
        spfSoLuong.setBackground(null);
        txtDonGia.setBackground(null);
        cldNgayNhap.setBackground(null);
        cboLoaiSach.setBackground(null);
        spfTuSo.setBackground(null);
        spfKeSo.setBackground(null);
    }

    public void fillTable() {
        this.model = (DefaultTableModel) this.tblKhoSach.getModel();
        this.model.setRowCount(0);

        for (int i = 0; i < list.size();) {
            KhoSach x = list.get(i);
            Object[] rowData = {++i, x.getSachID(), x.getTenSach(), x.getNhaxb(),
                x.getTacGia(), x.getSoLuong(), x.getDonGia(), x.getKeSo()
            };
            model.addRow(rowData);
        }
    }

    @Override
    public boolean validateData(KhoSach data) {

        return true;
    }

    @SuppressWarnings({"deprecation", "deprecation"})
    private void setKhoLoaiSach() {
        // Mặc định tìm theo cột TÊN SÁCH
        if (tblKhoSach.getSelectedColumns().length < 1) {
            int colSelected = findColumnName(tblKhoSach, "TÊN SÁCH");
            tblKhoSach.setColumnSelectionInterval(colSelected, colSelected);
            this.colSelected(tblKhoSach, txtColsSelected);
        }

        // Tạo câu truy vấn
        String colLoaiID = this.tblLoaiSach.getValueAt(
                this.tblLoaiSach.getSelectedRow(),
                this.findColumnName(tblLoaiSach, "LoaiID")
        ).toString();
        String sql, search = txtSearch.getText();
        if (search.length() > 1) {
            search = search.substring(0, search.length() - 2);
        }

        // Sứ lý điều kiện
        if (!colLoaiID.equalsIgnoreCase("all")) {
            sql = this.createSqlFindLike(tblKhoSach, search);
            sql += (sql.lastIndexOf("where") > 0
                    ? "and LoaiID = ? "
                    : " where LoaiID = ?");
            this.list = dao.SelectBySqlElement(sql, colLoaiID); // truy vấn
        } else {
            // All mặc định tìm tên sách
            sql = this.createSqlFindLike(tblKhoSach, search);
            this.list = dao.SelectBySqlElement(sql); // truy vấn "LoaiID = 'All'"
        }

        // Đổ dữ liệu bảng theo loại
        this.fillTable();
    }

    // __________________________________________________________________PANE_2
    private void tblKSachClick() {
        if (list != null) {
            KhoSach data = list.get(row = getIndexOfName());
            this.setForm(data);
            this.setForm2(data); // set form panel 2
        } else {
            System.err.println("list == null!");
        }
    }

    private int getIndexOfName() {
        int rowOf = this.tblKhoSach.getSelectedRow();
        int colOf = this.findColumnName(this.tblKhoSach, "SachID");
        String value = this.tblKhoSach.getValueAt(rowOf, colOf).toString();
        return this.findList(value);
    }

    // Hiển thị thông tin theo vị trí danh sách
    private void Directional(int row) {
        row = row > list.size() - 1 ? list.size() - 1 : row;
        if (!list.isEmpty()) {
            if (row >= 0) {
                this.setForm(list.get(row));
                this.UpdateStatus();
            }
            // Chỉnh điều hướng "next" & "previous" trên form
            if (row == 0) {
                this.bntPrev.setEnabled(false);
            } else if (row == list.size() - 1) {
                this.bntNext.setEnabled(false);
            } else {
                this.bntPrev.setEnabled(true);
                this.bntNext.setEnabled(true);
            }
            this.setForm(list.get(row));
            this.setForm2(list.get(row));
        } else {
            this.UpdateStatus();
        }
        this.clearBgr();
    }

    // Chỉnh sửa thao tác trên form
    private void UpdateStatus() {
        int size = list.size(); // Kiểm tra điều kiện danh sách + vị trí
        boolean check = row > -1 && row < size;
        // Các nút trên form 
        this.bntAdd.setEnabled(!check);
        this.bntUppdate.setEnabled(check);
        this.bntDelete.setEnabled(check);
        // Các nút điều hướng
        this.bntFirst.setEnabled(check);
        this.bntPrev.setEnabled(check && row > 0);
        this.bntNext.setEnabled(check && row < --size);
        this.bntEnd.setEnabled(check);
        // Fields cần đóng
        this.txtSachID.setEditable(!check);
    }

    void xuatFile() {
        String[] columns = {"STT", "SachID", "Tên Sách", "Nhà Xuất Bản", "Tác Giả", "Số Lượng", "Đơn Giá", "Kệ Số"};
        JFileChooser excelFileChooser = new JFileChooser();
        excelFileChooser.setDialogTitle("Save as");
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlxs");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showSaveDialog(null);
        if (excelChooser == JFileChooser.APPROVE_OPTION) {
            FileOutputStream excelFOU = null;
            BufferedOutputStream excelBOU = null;
            XSSFWorkbook excelJTableExporter = null;
            Row row = null;
            Cell cell = null;
            try {
                excelJTableExporter = new XSSFWorkbook();
                XSSFSheet excelSheet = excelJTableExporter.createSheet("JTable Sheet");
                excelSheet.setDefaultColumnWidth(15);
                // xét font cho header 
                XSSFFont headerFont = excelJTableExporter.createFont();
                headerFont.setBold(true); // in đậm
                headerFont.setFontHeightInPoints((short) 14);
                // xét font cho title chính
                XSSFFont titleFont = excelJTableExporter.createFont();
                titleFont.setBold(true);
                titleFont.setFontHeightInPoints((short) 18);
                titleFont.setColor(IndexedColors.BLUE.getIndex());
                //
                XSSFFont tieuDePhuFont = excelJTableExporter.createFont();
                tieuDePhuFont.setBold(true);
                tieuDePhuFont.setFontHeightInPoints((short) 12);
                tieuDePhuFont.setColor(IndexedColors.BLUE.getIndex());
                // cellStyle cua header bảng
                CellStyle headerCellStyle = excelJTableExporter.createCellStyle();
                headerCellStyle.setFont(headerFont);
                headerCellStyle.setFillForegroundColor(IndexedColors.AQUA.getIndex());
                headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                headerCellStyle.setBorderBottom(BorderStyle.MEDIUM);
                headerCellStyle.setBorderTop(BorderStyle.MEDIUM);
                headerCellStyle.setBorderLeft(BorderStyle.MEDIUM);
                headerCellStyle.setBorderRight(BorderStyle.MEDIUM);
                // cellStyle của bảng
                CellStyle tableCellStyle = excelJTableExporter.createCellStyle();
                tableCellStyle.setBorderBottom(BorderStyle.MEDIUM);
                tableCellStyle.setBorderTop(BorderStyle.MEDIUM);
                tableCellStyle.setBorderLeft(BorderStyle.MEDIUM);
                tableCellStyle.setBorderRight(BorderStyle.MEDIUM);
                // test for

                // xét vị trí giá trị cho header bảng
                row = excelSheet.createRow(6);
                for (int i = 0; i < columns.length; i++) {
                    cell = row.createCell(i);
                    cell.setCellValue(columns[i]);
                    cell.setCellStyle(headerCellStyle);
                }
                // xet vị trí giá trị cho bảng
                for (int i = 0; i < tblKhoSach.getRowCount(); i++) {
                    row = excelSheet.createRow(i + 7);
                    for (int j = 0; j < tblKhoSach.getColumnCount(); j++) {
                        cell = row.createCell(j);
                        cell.setCellValue(tblKhoSach.getValueAt(i, j).toString());
                        cell.setCellStyle(tableCellStyle);
                        // xet size cho cot
                        excelSheet.autoSizeColumn(i);
                        excelSheet.autoSizeColumn(i + 1);
                    }
                }

                excelFOU = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
                excelBOU = new BufferedOutputStream(excelFOU);
                excelJTableExporter.write(excelBOU);
                JOptionPane.showMessageDialog(this, "Đã xuất file");
            } catch (Exception e) {
                MsgBox.alert(this, "Có lỗi: " + e.toString());
            } finally {
                try {
                    if (excelBOU != null) {
                        excelBOU.close();
                    }
                    if (excelFOU != null) {
                        excelFOU.close();
                    }
                    if (excelJTableExporter != null) {
                        excelJTableExporter.close();
                    }
                    excelFOU.close();
                } catch (Exception e) {
                    MsgBox.alert(this, "Có lỗi: " + e.toString());
                }
            }
        }
    }

}
