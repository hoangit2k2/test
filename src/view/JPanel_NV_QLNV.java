/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.toedter.calendar.JCalendar;
import dao.NhanVienDAO;
import entities.NhanVien;
import java.awt.Color;
import java.sql.Date;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import model.Check;
import model.ImgTSX;
import model.Msg;
import model.Util;

/**
 *
 * @author abc
 */
public class JPanel_NV_QLNV extends javax.swing.JPanel
        implements InterfaceForm<NhanVien> {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form JPanel_NhanVien
     */
    public JPanel_NV_QLNV() {
        initComponents();
        this.LoadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAnh = new javax.swing.JLabel();
        txtColsSelected = new javax.swing.JTextField();
        pnlInformation = new javax.swing.JPanel();
        lblNvID = new javax.swing.JLabel();
        lblMatKhau = new javax.swing.JLabel();
        txtNvID = new javax.swing.JTextField();
        txtMK = new javax.swing.JPasswordField();
        lblHoTen = new javax.swing.JLabel();
        lblNgaySinh = new javax.swing.JLabel();
        txtHoTen = new javax.swing.JTextField();
        cldNgaySinh = new com.toedter.calendar.JDateChooser();
        lblDiaChi = new javax.swing.JLabel();
        lblSoDT = new javax.swing.JLabel();
        txtDiaChi = new javax.swing.JTextField();
        txtSoDT = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        lblChucVu = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        cboChucVu = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        pnlThaoTac = new javax.swing.JPanel();
        bntAdd = new javax.swing.JButton();
        bntUppdate = new javax.swing.JButton();
        bntDelete = new javax.swing.JButton();
        bntNew = new javax.swing.JButton();
        bntExport = new javax.swing.JButton();
        bntExit = new javax.swing.JButton();
        splNhanVien = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();

        setName("dữ liệu nhân viên"); // NOI18N

        lblAnh.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblAnh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAnh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/none.png"))); // NOI18N
        lblAnh.setText("none.png");
        lblAnh.setToolTipText("");
        lblAnh.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblAnh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblAnh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lblAnh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAnhMouseClicked(evt);
            }
        });

        txtColsSelected.setEditable(false);
        txtColsSelected.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtColsSelected.setText("Selected: ");

        pnlInformation.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlInformation.setLayout(new java.awt.GridLayout(0, 2, 5, 5));

        lblNvID.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblNvID.setText("Mã nhân viên");
        pnlInformation.add(lblNvID);

        lblMatKhau.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblMatKhau.setText("Mật khẩu");
        pnlInformation.add(lblMatKhau);

        txtNvID.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        pnlInformation.add(txtNvID);

        txtMK.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        pnlInformation.add(txtMK);

        lblHoTen.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblHoTen.setText("Họ và Tên");
        pnlInformation.add(lblHoTen);

        lblNgaySinh.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblNgaySinh.setText("Ngày Sinh");
        pnlInformation.add(lblNgaySinh);

        txtHoTen.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        pnlInformation.add(txtHoTen);

        cldNgaySinh.setToolTipText("2002-02-19");
        cldNgaySinh.setDateFormatString("yyyy-MM-dd");
        pnlInformation.add(cldNgaySinh);

        lblDiaChi.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblDiaChi.setText("Địa chỉ");
        pnlInformation.add(lblDiaChi);

        lblSoDT.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblSoDT.setText("Số điện thoại");
        pnlInformation.add(lblSoDT);

        txtDiaChi.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        pnlInformation.add(txtDiaChi);

        txtSoDT.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        pnlInformation.add(txtSoDT);

        lblEmail.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblEmail.setText("Email");
        pnlInformation.add(lblEmail);

        lblChucVu.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblChucVu.setText("Chức vụ");
        pnlInformation.add(lblChucVu);

        txtEmail.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        pnlInformation.add(txtEmail);

        cboChucVu.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cboChucVu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nhân viên", "Quản lý", "Khác" }));
        pnlInformation.add(cboChucVu);

        txtSearch.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        pnlThaoTac.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlThaoTac.setLayout(new java.awt.GridLayout(0, 1));

        bntAdd.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/insert.png"))); // NOI18N
        bntAdd.setText("Thêm");
        bntAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntAddActionPerformed(evt);
            }
        });
        pnlThaoTac.add(bntAdd);

        bntUppdate.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntUppdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/update.png"))); // NOI18N
        bntUppdate.setText("Sửa");
        bntUppdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntUppdateActionPerformed(evt);
            }
        });
        pnlThaoTac.add(bntUppdate);

        bntDelete.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        bntDelete.setText("Xóa");
        bntDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntDeleteActionPerformed(evt);
            }
        });
        pnlThaoTac.add(bntDelete);

        bntNew.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/new.png"))); // NOI18N
        bntNew.setText("Mới");
        bntNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntNewActionPerformed(evt);
            }
        });
        pnlThaoTac.add(bntNew);

        bntExport.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/export.png"))); // NOI18N
        bntExport.setText("Xuất file");
        bntExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntExportActionPerformed(evt);
            }
        });
        pnlThaoTac.add(bntExport);

        bntExit.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        bntExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/exit.png"))); // NOI18N
        bntExit.setText("Thoát");
        bntExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntExitActionPerformed(evt);
            }
        });
        pnlThaoTac.add(bntExit);

        splNhanVien.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        splNhanVien.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        splNhanVien.setName("NhanVien"); // NOI18N

        tblData.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NvID", "MẬT KHẨU", "HỌ VÀ TÊN", "NGÀY SINH", "ĐỊA CHỈ", "SỐ ĐIỆN THOẠI", "ĐỊA CHỈ EMAIL", "CHỨC VỤ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblData.setName("NhanVien"); // NOI18N
        tblData.setRowHeight(25);
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        tblData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblDataKeyReleased(evt);
            }
        });
        splNhanVien.setViewportView(tblData);
        if (tblData.getColumnModel().getColumnCount() > 0) {
            tblData.getColumnModel().getColumn(0).setResizable(false);
            tblData.getColumnModel().getColumn(0).setPreferredWidth(8);
            tblData.getColumnModel().getColumn(1).setPreferredWidth(8);
            tblData.getColumnModel().getColumn(3).setPreferredWidth(12);
            tblData.getColumnModel().getColumn(6).setPreferredWidth(20);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(splNhanVien)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblAnh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtColsSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlInformation, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                            .addComponent(txtSearch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlThaoTac, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pnlInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblAnh, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(txtColsSelected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pnlThaoTac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(splNhanVien, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtColsSelected, txtSearch});

    }// </editor-fold>//GEN-END:initComponents

    private void bntAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntAddActionPerformed
        this.Insert();
    }//GEN-LAST:event_bntAddActionPerformed

    private void bntUppdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntUppdateActionPerformed
        this.update();
    }//GEN-LAST:event_bntUppdateActionPerformed

    private void bntDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntDeleteActionPerformed
        this.delete();
    }//GEN-LAST:event_bntDeleteActionPerformed

    private void bntNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntNewActionPerformed
        this.clearForm();
    }//GEN-LAST:event_bntNewActionPerformed

    private void bntExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntExportActionPerformed
        new ShowSelectionExport(null, true, tblData).setVisible(true);
    }//GEN-LAST:event_bntExportActionPerformed

    private void bntExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntExitActionPerformed
        JLabel lbl = JFrame_TrangNV.lblTrangThai;
        this.removeAll();
        this.repaint();
        this.validate();
        this.setVisible(false);

        lbl.setText("Trang chủ");
        lbl.setIcon(Util.Image.getIcon("src/icons/home.gif"));
    }//GEN-LAST:event_bntExitActionPerformed

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked
        this.colSelected(tblData, txtColsSelected);
        this.tblClicked();
    }//GEN-LAST:event_tblDataMouseClicked

    private void tblDataKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDataKeyReleased
        if (!list.isEmpty()) {
            this.colSelected(tblData, txtColsSelected);
            int k = evt.getKeyCode();
            if (k == 33 || k == 34 || k == 38 || k == 40) {
                this.tblClicked();
            }
        }
    }//GEN-LAST:event_tblDataKeyReleased

    private void lblAnhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAnhMouseClicked
        img.setFile(Util.Image.ChooserFile(this), lblAnh);
    }//GEN-LAST:event_lblAnhMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        @SuppressWarnings("deprecation")
        String sql = this.createSqlFindLike(tblData, txtSearch.getText());
        list = dao.SelectBySqlElement(sql);
        this.fillTable();
    }//GEN-LAST:event_txtSearchKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntAdd;
    private javax.swing.JButton bntDelete;
    private javax.swing.JButton bntExit;
    private javax.swing.JButton bntExport;
    private javax.swing.JButton bntNew;
    private javax.swing.JButton bntUppdate;
    private javax.swing.JComboBox<String> cboChucVu;
    private com.toedter.calendar.JDateChooser cldNgaySinh;
    private javax.swing.JLabel lblAnh;
    private javax.swing.JLabel lblChucVu;
    private javax.swing.JLabel lblDiaChi;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblHoTen;
    private javax.swing.JLabel lblMatKhau;
    private javax.swing.JLabel lblNgaySinh;
    private javax.swing.JLabel lblNvID;
    private javax.swing.JLabel lblSoDT;
    private javax.swing.JPanel pnlInformation;
    private javax.swing.JPanel pnlThaoTac;
    private javax.swing.JScrollPane splNhanVien;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txtColsSelected;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JPasswordField txtMK;
    private javax.swing.JTextField txtNvID;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSoDT;
    // End of variables declaration//GEN-END:variables
    private List<NhanVien> list = new LinkedList<>();
    private final NhanVienDAO dao = new NhanVienDAO();
    private DefaultTableModel model;
    private boolean status = true;
    private final ImgTSX img = new ImgTSX(
            lblAnh, "src/icons/none.png", "images/NhanVien/");

    // Tải dữ liệu lần đầu
    private void LoadData() {
        this.tblData.setColumnSelectionAllowed(true);
        this.tblData.setAutoCreateRowSorter(true);
        this.list = dao.SelectAllElement();
        this.fillTable();
        this.setStatus();
    }

    @Override // Thêm thông tin nhân viên
    public void Insert() {
        int i = this.findList(this.txtNvID.getText());
        if (i < 0) {
            NhanVien data = this.getForm();
            if (validateData(data)) {
                ImgTSX.width = 151;
                ImgTSX.height = 228;
                data.setHinhAnh(img.checkFile() ? (data.getNvID() + ".png") : null);
                if (dao.insert(data)) {
                    list.add(data);
                    this.img.saveUpIcon(data.getNvID());
                    this.fillTable();
                    this.alertGroup(this.getName(), alertType.insert1);
                    this.clearForm();
                } else {
                    this.alertGroup(this.getName(), alertType.insert3);
                }
            }
        } else {
            this.txtNvID.setBackground(Color.red);
            this.alertGroup(this.getName(), alertType.insert2);
        }
    }

    @Override // sửa thông tin nhân viên
    public void update() {
        int i = this.findList(this.txtNvID.getText());
        if (i > -1) {
            NhanVien data = this.getForm();
            if (validateData(data)) {
                ImgTSX.width = 151;
                ImgTSX.height = 228;
                data.setHinhAnh(img.checkFile() ? (data.getNvID() + ".png") : null);
                if (dao.update(data)) {
                    list.set(i, data);
                    this.img.saveUpIcon(data.getNvID());
                    this.fillTable();
                    this.alertGroup(this.getName(), alertType.update1);
                    this.clearForm();
                } else {
                    this.alertGroup(this.getName(), alertType.update3);
                }
            }
        } else {
            this.txtNvID.setBackground(Color.red);
            this.alertGroup(this.getName(), alertType.update2);
        }
    }

    @Override // Xóa thông tin nhân viên
    public void delete() {
        int i = this.findList(this.txtNvID.getText());
        if (i > -1) {
            if (dao.delete(this.txtNvID.getText())) {
                list.remove(i);
                this.img.deleteIcon();
                this.fillTable();
                this.alertGroup(this.getName(), alertType.delete1);
                this.clearForm();
            } else {
                this.alertGroup(this.getName(), alertType.delete3);
            }
        } else {
            this.txtNvID.setBackground(Color.red);
            this.alertGroup(this.getName(), alertType.delete2);
        }
        this.clearForm();
    }

    @Override // tìm theo khóa trong danh sách
    public int findList(Object key) {
        String findBy = (String) key;
        for (int i = 0; i < list.size(); i++) {
            if (findBy.equalsIgnoreCase(list.get(i).getNvID())) {
                return i;
            }
        }
        return -1;
    }

    @Override // Lấy thông tin nhân viên trên form
    @SuppressWarnings("deprecation")
    public NhanVien getForm() {
        Calendar calendar = this.cldNgaySinh.getCalendar();
        Date ngaysinh = calendar == null ? null
                : new Date(calendar.getTimeInMillis());
        // Lấy thông tin trên form
        NhanVien nv = new NhanVien();
        nv.setNvID(Util.ramdomCode(txtNvID.getText(), 10));
        nv.setMatKhau(txtMK.getText());
        nv.setHoTen(txtHoTen.getText());
        nv.setNgaySinh(ngaysinh);
        nv.setDiaChi(txtDiaChi.getText());
        nv.setSoDT(txtSoDT.getText());
        nv.setEmail(txtEmail.getText());
        nv.setChucVu(cboChucVu.getSelectedIndex());
        nv.setHinhAnh(img.getFile() != null ? img.getFile().getName() : null);
        return nv;
    }

    @Override // đỗ dữ liệu lên form
    public void setForm(NhanVien data) {
        this.clearBgr();
        JCalendar c = new JCalendar(data.getNgaySinh());
        // đổ dữ liệu từ form
        this.txtNvID.setText(data.getNvID());
        this.txtMK.setText(data.getMatKhau());
        this.txtHoTen.setText(data.getHoTen());
        this.cldNgaySinh.setCalendar(c.getCalendar());
        this.txtDiaChi.setText(data.getDiaChi());
        this.txtSoDT.setText(data.getSoDT());
        this.txtEmail.setText(data.getEmail());
        this.cboChucVu.setSelectedIndex(data.getChucVu());
        // thực thể chứa hình ảnh
        ImgTSX.width = 151;
        ImgTSX.height = 228;
        this.img.setFile(data.getHinhAnh(), lblAnh);
    }

    @Override // Xóa trắng form
    public void clearForm() {
        // Phương thức mặc định của interface
        this.clearForm(pnlInformation);
        // Xóa thông tin form
        this.lblAnh.setText("150 x 228");
        this.lblAnh.setIcon(null);
        // Cập nhật trạng thái
        this.status = true;
        this.clearBgr();
        this.setStatus();
    }

    // Trạng thái các fields nhập liệu và nút tương tác
    private void setStatus() {
        txtNvID.setBackground(status ? Color.WHITE : Color.GRAY);
        txtMK.setBackground(status ? Color.WHITE : Color.GRAY);
        bntUppdate.setEnabled(!status);
        bntDelete.setEnabled(!status);
        txtNvID.setEditable(status);
        txtMK.setEditable(status);
        bntAdd.setEnabled(status);
    }

    // Xóa màu nền các fields
    private void clearBgr() {
        txtNvID.setBackground(null);
        txtMK.setBackground(null);
        txtHoTen.setBackground(null);
        cldNgaySinh.setBackground(null);
        txtDiaChi.setBackground(null);
        txtSoDT.setBackground(null);
        txtEmail.setBackground(null);
    }

    // @Override // đổ dữ liệu lên bảng
    public void fillTable() {
        model = (DefaultTableModel) tblData.getModel();
        model.setRowCount(0);
        if (list != null) {
            int col = this.findColumnName(tblData, "Mật khẩu");
            list.forEach((x) -> {
                Object[] rows = x.toArray();
                rows[col] = "Ø"; // Không cho xem mật khẩu
                int chucVu = (int) rows[rows.length - 2];
                rows[rows.length - 2] = chucVu == 1 ? "Trưởng phòng"
                        : chucVu == 0 ? "Nhân viên" : "Khác";
                model.addRow(rows);
            });
        } else {
            System.err.println("check again constructor elementDAO()!");
        }
    }

    // Chọn dữ trên bảng
    private void tblClicked() {
        this.status = false;
        int row = this.tblData.getSelectedRow();
        int col = this.findColumnName(this.tblData, "NvID");
        String value = this.tblData.getValueAt(row, col).toString();
        int i = this.findList(value);
        // Cập nhật trạng thái
        this.setForm(list.get(i));
        this.setStatus();
    }

    @Override // Kiểm tra dữ liệu
    @SuppressWarnings({"deprecation", "deprecation"})
    public boolean validateData(NhanVien data) {
        this.clearBgr();
        // kiểm tra mã nhân viên
        if (!Check.String(data.getNvID(), Check.regex.CODE, "{5,10}")) {
            txtNvID.setBackground(Color.YELLOW);
            Msg.Alert("Mã nhân viên phải là kí tự từ 5-10!",
                    "Lỗi mã nhân viên", Msg.MesType.CanhBao);
            return false;
        }
        // Kiểm tra mật khẩu
        if (!Check.String(data.getMatKhau(), Check.regex.PASS, "{3,20}")
                && !Check.String(data.getMatKhau(), "\\S", "")) {
            txtMK.setBackground(Color.YELLOW);
            Msg.Alert("Mật khẩu không được chứa kí tự khoảng trắng!\n"
                    + "\tMật khẩu trong khoảng 3 - 20 kí tự",
                    "Mật khẩu chứa kí tự rỗng", Msg.MesType.CanhBao);
            return false;
        }
        // Kiểm tra họ tên
        if (!Check.String(data.getHoTen(), Check.regex.NAME, "")
                && !Check.String(data.getHoTen(), 3, 50)) {
            txtHoTen.setBackground(Color.YELLOW);
            Msg.Alert("Họ và tên không được:\n"
                    + "\t-chứa kí tự đặc biệt!\n"
                    + "\t-chứa chứa kí tự số!",
                    "Lỗi họ và tên nhân viên", Msg.MesType.CanhBao);
            return false;
        }
        // kiểm tra ngày sinh
        if (!Check.Date(data.getNgaySinh(), 18)) {
            cldNgaySinh.setBackground(Color.YELLOW);
            if (data.getNgaySinh() != null) {
                Msg.Alert("Sinh ngày: " + data.getNgaySinh()
                        + " chưa đủ 18 tuổi lao động!",
                        "Chưa đủ tuổi lao động", Msg.MesType.CanhBao);
            } else {
                Msg.Alert("Chưa nhập ngày sinh!",
                        "Chưa đủ tuổi lao động", Msg.MesType.CanhBao);
            }
            return false;
        }
        // kiểm tra địa chỉ
        if (!Check.String(data.getDiaChi(), 1, 250)) {
            txtDiaChi.setBackground(Color.YELLOW);
            Msg.Alert("Địa chỉ phải trong khoảng 1 - 255 kí tự!",
                    "Quá kí tự chỉ định", Msg.MesType.CanhBao);
            return false;
        }
        // kiểm tra số điện thoại
        if (!Check.String(data.getSoDT(), Check.regex.PHONE_NUMBER, "{6,20}")) {
            txtSoDT.setBackground(Color.YELLOW);
            Msg.Alert("Số điện thoại chỉ được chứa số\n\tvà trong khoảng 6-20 kí tự!",
                    "Số điện thoại không hợp lệ", Msg.MesType.CanhBao);
            return false;
        }
        // kiểm tra email
        if (!Check.String(data.getEmail(), Check.regex.EMAIL, "{1,50}")) {
            txtEmail.setBackground(Color.YELLOW);
            Msg.Alert("Email phải từ 1-50 kí tự!\n"
                    + "Không đúng định dạng email",
                    "Email không đúng định dạng", Msg.MesType.CanhBao);
            return false;
        }
        // Kiểm tra file
        String alertImg = "Chưa chọn hình ảnh nhân viên!\n"
                + "Xác nhận chọn hình mặc định?";
        if (this.img.getFile() == null) {
            this.img.alertCheck(alertImg, lblAnh);
        } else if (!this.img.getFile().canExecute()
                || this.img.getFile().getName().endsWith("none.png")) {
            this.img.alertCheck(alertImg, lblAnh);
        }
        // Kết quả kiểm tra hoàn thành
        return true;
    }
}
